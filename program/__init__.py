import tkinter as tk
from tkinter import ttk
from viewable import Viewable


def generate_caption(context):
    return "*Caption* generated by %%script%%. Image drawn by a %Human%."


class Calc(Viewable):
    def __init__(self, context):
        super().__init__()
        self._context = context
        self._viewer = context.viewer
        self._field_strvar = tk.StringVar()
        self._input_field = None

    def _create_body(self, parent):
        return tk.Frame(parent, name="calc")

    def _build(self):
        # frames
        top_frame = tk.Frame(self.body)
        top_frame.pack(fill=tk.X, padx=6, pady=(6, 1))
        bottom_frame = tk.Frame(self.body)
        bottom_frame.pack(fill=tk.BOTH, expand=True,
                          padx=5, pady=(0, 5))
        # input field
        self._install_input_field(top_frame)
        # install keyboard
        self._install_keyboard(bottom_frame)
        # make body scrollable
        self._viewer.make_scrollable(self.body)

    def _install_input_field(self, frame):
        self._input_field = tk.Entry(frame, state="readonly",
                                     justify=tk.RIGHT,
                                     textvariable=self._field_strvar)
        self._input_field.pack(fill=tk.X)

    def _install_keyboard(self, frame):
        keys = [("789UC"), ("456+-"),
                ("123x/"), ("0.=()")]
        for i, line in enumerate(keys):
            frame.rowconfigure(i, weight=1)
            for j, item in enumerate(line):
                frame.columnconfigure(j, weight=1)
                command = lambda item=item: self._insert(item)
                b = ttk.Button(frame, style="calc.TButton",
                               text=item, command=command)
                b.grid(row=i, column=j, sticky="nswe", padx=1, pady=1)

    def _insert(self, item):
        # compute input data
        if item == "=":
            self._compute()
            return
        # clear the input field
        if item == "C":
            self._field_strvar.set("")
            return
        # undo
        if item == "U":
            self._input_field.config(state="normal")
            x = self._input_field.index(tk.END)
            self._input_field.delete(x-1)
            self._input_field.config(state="readonly")
            return
        # update multiplication sign
        item = "*" if item == "x" else item
        # insert item in the input field
        self._input_field.config(state="normal")
        self._input_field.insert(tk.END, item)
        self._input_field.icursor(tk.END)
        self._input_field.xview_moveto(1.0)
        self._input_field.config(state="readonly")

    def _compute(self):
        # compute data
        input_data = self._field_strvar.get()
        if not input_data or input_data.isspace():
            return
        try:
            result = eval(input_data)
        except ZeroDivisionError:
            result = "Zero Division Error"
        except Exception:
            result = "Error"
        self._field_strvar.set(result)


def print_in_cli(context):
    if not context.arguments:
        return
    text = " ".join(context.arguments)
    print(text)

